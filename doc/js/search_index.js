var search_data = {"index":{"searchIndex":["powervmtools","common","error","customerror","powerstateerror","frame","hmc","lpar","nim","vios","cfgdev()","clientexists?()","clientsettings()","create()","createclient()","createmapping()","deletelpar()","dlpar()","frameexists?()","framesbystatus()","get_hdisk_bible()","getframes()","getlparconfig()","getlparprofiles()","getlpars()","getmappings()","getstate()","getvadaptername()","getvfcmap()","getvfcmappings()","getvioadaptersnames()","handle()","handle()","lparexists?()","lppsource()","mappings()","mkfcmap()","mksysb()","net_boot()","networks()","networks()","networks()","new()","new()","new()","new()","new()","new()","new()","nimcommand()","parse_profile()","parse_virtual_line()","parse_virtualfc_line()","power()","removemapping()","rmdev()","run_command()","run_command()","run_command()","save_profile()","setframe()","setsettings()","setupnim()","spots()","testlink()","vioserver()","license","readme","powervmtools.gemspec"],"longSearchIndex":["powervmtools","powervmtools::common","powervmtools::error","powervmtools::error::customerror","powervmtools::error::powerstateerror","powervmtools::frame","powervmtools::hmc","powervmtools::lpar","powervmtools::nim","powervmtools::vios","powervmtools::vios#cfgdev()","powervmtools::nim#clientexists?()","powervmtools::nim#clientsettings()","powervmtools::lpar#create()","powervmtools::nim#createclient()","powervmtools::vios#createmapping()","powervmtools::lpar#deletelpar()","powervmtools::lpar#dlpar()","powervmtools::hmc#frameexists?()","powervmtools::hmc#framesbystatus()","powervmtools::vios#get_hdisk_bible()","powervmtools::hmc#getframes()","powervmtools::lpar#getlparconfig()","powervmtools::lpar#getlparprofiles()","powervmtools::frame#getlpars()","powervmtools::lpar#getmappings()","powervmtools::lpar#getstate()","powervmtools::vios#getvadaptername()","powervmtools::vios#getvfcmap()","powervmtools::lpar#getvfcmappings()","powervmtools::lpar#getvioadaptersnames()","powervmtools::error::customerror#handle()","powervmtools::error::powerstateerror#handle()","powervmtools::frame#lparexists?()","powervmtools::nim#lppsource()","powervmtools::vios#mappings()","powervmtools::vios#mkfcmap()","powervmtools::nim#mksysb()","powervmtools::lpar#net_boot()","powervmtools::frame#networks()","powervmtools::nim#networks()","powervmtools::vios#networks()","powervmtools::error::customerror::new()","powervmtools::error::powerstateerror::new()","powervmtools::frame::new()","powervmtools::hmc::new()","powervmtools::lpar::new()","powervmtools::nim::new()","powervmtools::vios::new()","powervmtools::nim#nimcommand()","powervmtools::common::parse_profile()","powervmtools::common::parse_virtual_line()","powervmtools::common::parse_virtualfc_line()","powervmtools::lpar#power()","powervmtools::vios#removemapping()","powervmtools::vios#rmdev()","powervmtools::hmc#run_command()","powervmtools::nim#run_command()","powervmtools::vios#run_command()","powervmtools::lpar#save_profile()","powervmtools::lpar#setframe()","powervmtools::lpar#setsettings()","powervmtools::nim#setupnim()","powervmtools::nim#spots()","powervmtools::common::testlink()","powervmtools::frame#vioserver()","","",""],"info":[["PowerVMTools","","PowerVMTools.html","",""],["PowerVMTools::Common","","PowerVMTools/Common.html","",""],["PowerVMTools::Error","","PowerVMTools/Error.html","",""],["PowerVMTools::Error::CustomError","","PowerVMTools/Error/CustomError.html","",""],["PowerVMTools::Error::PowerStateError","","PowerVMTools/Error/PowerStateError.html","",""],["PowerVMTools::Frame","","PowerVMTools/Frame.html","",""],["PowerVMTools::HMC","","PowerVMTools/HMC.html","","<p>The HMC class is used to define HMC objects.\n"],["PowerVMTools::Lpar","","PowerVMTools/Lpar.html","",""],["PowerVMTools::NIM","","PowerVMTools/NIM.html","",""],["PowerVMTools::Vios","","PowerVMTools/Vios.html","",""],["cfgdev","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-cfgdev","(*dev)","<p>Execute the cfgdev command on this vio.\nthe optional &quot;dev&quot;\nargument is used to specified the ...\n"],["clientExists?","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-clientExists-3F","(client)",""],["clientsettings","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-clientsettings","(client)",""],["create","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-create","(options = {})","<p>Will create a lpar with the following options.\nMust specify settings with\nself.setsettings() before. ...\n"],["createclient","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-createclient","(client)",""],["createmapping","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-createmapping","(device,vadapter,options = {})","<p>Will create the vscsi mapping for the specified devices with options\n:\ndevice =&gt; the device for create ...\n"],["deletelpar","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-deletelpar","(options = {})","<p>Delete this lpar, with options :\n{ :test =&gt; (bool) True | False }\n"],["dlpar","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-dlpar","(action,options = {})","<p>Initiate a DLPAR operation on this lpar Object.\nthe options are used to\ndefined the settings :\n&lt;code&gt; ...\n"],["frameExists?","PowerVMTools::HMC","PowerVMTools/HMC.html#method-i-frameExists-3F","(framename)","<p>Check if frame &#39;framename&#39; exists on this HMC\nreturn a (bool)\nTrue/False\n"],["framesbystatus","PowerVMTools::HMC","PowerVMTools/HMC.html#method-i-framesbystatus","(status)","<p>return a Array of frames filtered by status\n"],["get_hdisk_bible","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-get_hdisk_bible","()","<p>Will populate the attribut hdisk_bible\nwith a Array of Hashes.\nArray = [{\n:name =&gt; &quot;hdisk10&quot;, ...\n"],["getframes","PowerVMTools::HMC","PowerVMTools/HMC.html#method-i-getframes","()","<p>return a Array of frames along with their configuration (lssyscfg)\n"],["getlparconfig","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-getlparconfig","()","<p>Return the Lpar configuration (not profile) as a hash of settings\n"],["getlparprofiles","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-getlparprofiles","()","<p>will get all profiles for the lpar, returning an Array of :\nArray = [\n{profiledata1},{profiledata2}] ...\n"],["getlpars","PowerVMTools::Frame","PowerVMTools/Frame.html#method-i-getlpars","()","<p>Populate the lpars attribute with a list of all defined lpar on this\nframe.\n"],["getmappings","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-getmappings","()","<p>return a list of vscsi mappings for this lpar.\n"],["getstate","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-getstate","()","<p>return the lpar status.\n"],["getvadaptername","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-getvadaptername","(adap_id)","<p>Will return the device name for the specifed adap_id\nuses the attribute\nvadapters\n"],["getvfcmap","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-getvfcmap","(vfchost)","<p>Will return a Hash made of the vfcmap for the specified vfchost\nHash =\n{&quot;status&quot; =&gt; status, ...\n"],["getvfcmappings","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-getvfcmappings","()","<p>return a list of vfc mappings for this lpar\n"],["getvioadaptersnames","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-getvioadaptersnames","()","<p>Will create and return a Hash of Hashes of the vadapters names on the vio\nserver\n"],["handle","PowerVMTools::Error::CustomError","PowerVMTools/Error/CustomError.html#method-i-handle","()",""],["handle","PowerVMTools::Error::PowerStateError","PowerVMTools/Error/PowerStateError.html#method-i-handle","()",""],["lparexists?","PowerVMTools::Frame","PowerVMTools/Frame.html#method-i-lparexists-3F","(lparname)","<p>Return a (bool) True/False statement if the lpar exists or not\n"],["lppsource","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-lppsource","()",""],["mappings","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-mappings","(vhost)","<p>Fetch and return a array of hashes of the mappings for the specified vhost\nadapters<br>\nArray = [ { &quot;vtd&quot; ...\n"],["mkfcmap","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-mkfcmap","(vfcname,fcname)","<p>Will create a VFC map between the specified vfcdev &amp; fc dev\n"],["mksysb","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-mksysb","()",""],["net_boot","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-net_boot","(options = {})","<p>will initiate a net_boot along with the specified options :\n{ :ip =&gt;\n&#39;192.168.10.16&#39;,\n :netmask ...\n"],["networks","PowerVMTools::Frame","PowerVMTools/Frame.html#method-i-networks","()","<p>return a array of all the network defined on this managed frame\n"],["networks","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-networks","()",""],["networks","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-networks","()","<p>return a Array of Vlans available on the VIOs\n"],["new","PowerVMTools::Error::CustomError","PowerVMTools/Error/CustomError.html#method-c-new","(arguments = {})",""],["new","PowerVMTools::Error::PowerStateError","PowerVMTools/Error/PowerStateError.html#method-c-new","(arguments = {})",""],["new","PowerVMTools::Frame","PowerVMTools/Frame.html#method-c-new","(framename, objhmc, options = {})",""],["new","PowerVMTools::HMC","PowerVMTools/HMC.html#method-c-new","(name, options = {})","<p>The new method.\noptions are :\n<p>:user : HMC username to use. Must have the Rights to launch VIO Commands …\n"],["new","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-c-new","(name,options = {})","<p>the new method used to define lpar objects\noptions :\n* :frame : the frame\nobject which holds/will holds ...\n"],["new","PowerVMTools::NIM","PowerVMTools/NIM.html#method-c-new","(name, options = {})",""],["new","PowerVMTools::Vios","PowerVMTools/Vios.html#method-c-new","(name, options = {})","<p>This method initialize a new VIO Object.\n"],["nimcommand","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-nimcommand","(jobtype,target,options = {})",""],["parse_profile","PowerVMTools::Common","PowerVMTools/Common.html#method-c-parse_profile","(data)",""],["parse_virtual_line","PowerVMTools::Common","PowerVMTools/Common.html#method-c-parse_virtual_line","(line)",""],["parse_virtualfc_line","PowerVMTools::Common","PowerVMTools/Common.html#method-c-parse_virtualfc_line","(line)",""],["power","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-power","(options = {})","<p>Will initate a Power Operation for this lpar with the specified options :\n{\n:action =&gt; &quot;poweron&quot; ...\n"],["removemapping","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-removemapping","(vtdname)","<p>Will remove the vscsi mapping for the specified vtdname\n"],["rmdev","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-rmdev","(devname)","<p>Will execute the rmdev command on this vio for the specified devname\n"],["run_command","PowerVMTools::HMC","PowerVMTools/HMC.html#method-i-run_command","(command)","<p>Run a hmc command and returns the output\n"],["run_command","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-run_command","(command)",""],["run_command","PowerVMTools::Vios","PowerVMTools/Vios.html#method-i-run_command","(command)","<p>Execute “command” on the VIO Server (via HMC SSH Connexion using viosvrcmd)\n"],["save_profile","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-save_profile","()","<p>Save the running profile to the current profile.\n"],["setframe","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-setframe","(objframe)","<p>Set the frame objframe to this object.\nCan be use to update a lpar object\nat creation time (self.create()) ...\n"],["setsettings","PowerVMTools::Lpar","PowerVMTools/Lpar.html#method-i-setsettings","(options = {})","<p>Set the settings for the lpar creation.\n"],["setupnim","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-setupnim","(name, options = {})",""],["spots","PowerVMTools::NIM","PowerVMTools/NIM.html#method-i-spots","()",""],["testlink","PowerVMTools::Common","PowerVMTools/Common.html#method-c-testlink","(host,user,pass,options = {})",""],["vioserver","PowerVMTools::Frame","PowerVMTools/Frame.html#method-i-vioserver","(id)","<p>return the VIO Server object for vio server id &#39;id&#39;\n"],["LICENSE","","LICENSE.html","","\n<pre>         Apache License\n   Version 2.0, January 2004\nhttp://www.apache.org/licenses/</pre>\n<p>TERMS AND CONDITIONS …\n"],["README","","README_md.html","","<p>powervmtools\n\n<blockquote><p>Ruby library used to work with <strong>IBM Power\nHypervisor.</strong>\nTested on HMC v7r7.9 and VIOServer  ...\n</blockquote>\n"],["powervmtools.gemspec","","powervmtools_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;powervmtools&#39;\ns.version     = &#39;0.0.4&#39;\ns.date        = &#39;2015-10-07&#39; ...</pre>\n"]]}}